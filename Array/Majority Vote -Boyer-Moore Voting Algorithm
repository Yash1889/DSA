//C++
//GFG
//Algorithm: Boyer-Moore Voting Algorithm
//TIME COMPLEXITY :- O(n)
//SPACE COMPLEXITY :- O(1)

class solution{
  public:
    // Function to find the majority elements in the array
    vector<int> findMajority(vector<int>& nums) {
        // Your code goes here.
        int e1=nums[0],e2=nums[0];
        int count1=0,count2=0;
        int n = nums.size();
        for(int i=0;i<n;i++){
            if(e1==nums[i]) count1++;
            else if(e2==nums[i]) count2++;
            else if(count1 == 0){
                e1 = nums[i];
                count1 = 1;
            }
            else if(count2 == 0){
                e2 = nums[i];
                count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
        int f1=0,f2=0;
        vector<int>ans;
        for(int i=0;i<n;i++){
            if(nums[i]==e1)f1++;
            else if(nums[i]==e2)f2++;
        }
        if(f1>n/3) ans.push_back(e1);
        if(f2>n/3) ans.push_back(e2);
        if(ans.size()==0)return{-1};
        return ans;
    }
};
